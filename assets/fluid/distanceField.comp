#version 460 core
#extension GL_ARB_compute_shader : enable

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

struct Plane {
    vec4 normal;
    vec4 point;
};

layout(std430, binding = 0) restrict readonly buffer Boundaries {
    Plane boundaries[];
};

layout(binding = 1, rgba32f) uniform restrict writeonly image3D distanceField;
uniform int gridRes;
uniform int numBoundaries;
uniform float binSize;

float distanceToPlane(vec3 point, Plane plane) {
    return dot(plane.normal.xyz, point - plane.point.xyz);
}

void main() {
    const ivec3 binCoord = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(binCoord, ivec3(gridRes)))) {
        return;
    }
    
    const vec3 point = binSize * binCoord;
    int minIndex = -1;
    float minDist = 99999999;

    // find closest wall
    for (int i = 0; i < numBoundaries; i++) {
        const Plane wall = boundaries[i];
        float dist = distanceToPlane(point, wall);
        if (dist < 0) {
            dist *= -1;
        }

        if (dist < minDist) {
            minIndex = i;
            minDist = dist;
        }
    }

    if (minIndex < 0) {
        return;
    }

    const Plane closest = boundaries[minIndex];

    // store the closest wall's normal and the distance to it in the distance field
    imageStore(distanceField, binCoord, vec4(closest.normal.xyz, minDist));
}
