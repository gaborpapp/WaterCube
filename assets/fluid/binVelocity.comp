#version 460 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(location = 0, r32ui) uniform restrict uimage3D countGrid;
layout(location = 1, r32ui) uniform restrict uimage3D offsetGrid;
layout(location = 2, rgba32f) uniform restrict writeonly image3D velocityField;
uniform float gridRes;

struct Particle {
    vec3 position;
    vec3 velocity;
    float density;
    float pressure;
};

layout(std430, binding = 1) restrict readonly buffer Particles {
    Particle particles[];
};

void main() {
    const ivec3 binCoord = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(binCoord, ivec3(gridRes)))) {
        return;
    }

    const uint count = imageLoad(countGrid, binCoord).x;
    const uint offset = imageLoad(offsetGrid, binCoord).x;
    vec3 velocity = vec3(0);

    for (uint i = 0; i < count; i++) {
        velocity += particles[offset + i].velocity;
    }

    if (count > 0) {
        velocity /= count;
    }

    imageStore(velocityField, binCoord, vec4(velocity, 1));
}
