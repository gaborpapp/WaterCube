#version 460 core

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

struct Particle {
    vec3 position;
    float density;
    vec3 velocity;
    float pressure;
};

layout(std430, binding = 0) restrict readonly buffer Particles {
    Particle particles[];
};

layout(std430, binding = 1) restrict readonly buffer Counts {
    uint counts[];
};

layout(std430, binding = 2) restrict readonly buffer Offsets {
    uint offsets[];
};

layout(binding = 3, rgba32f) uniform restrict writeonly image3D velocityField;
uniform int gridRes;

void main() {
    const ivec3 c = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(c, ivec3(gridRes)))) {
        return;
    }

    const uint index = c.z * gridRes * gridRes + c.y * gridRes + c.z;
    const uint count = counts[index];
    const uint offset = offsets[index];
    vec3 velocity = vec3(0);

    for (uint i = 0; i < count; i++) {
        velocity += particles[offset + i].velocity;
    }

    if (count > 0) {
        velocity /= count;
    }

    imageStore(velocityField, c, vec4(velocity, 0));
}
