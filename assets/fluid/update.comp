#version 460 core

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

const vec3 MAX_SPEED = vec3(50);

struct Particle {
    vec3 position;
    float density;
    vec3 velocity;
    float pressure;
};

layout(std430, binding = 0) restrict buffer Particles {
    Particle particles[];
};

layout(std430, binding = 1) restrict readonly buffer Counts {
    uint counts[];
};

layout(std430, binding = 2) restrict readonly buffer Offsets {
    uint offsets[];
};

layout(std430, binding = 3) restrict buffer Debug {
    uint debug[];
};

uniform float size;
uniform float binSize;
uniform int gridRes;
uniform float dt;
uniform int numParticles;
uniform vec3 gravity;
uniform float particleMass;
uniform float kernelRadius;
uniform float viscosityCoefficient;
uniform vec3 cameraPosition;
uniform vec3 mouseRayDirection;
uniform float spikyKernelConst;
uniform float viscosityKernelConst;

// Equation (8) from Harada
vec3 spikyKernel(vec3 r, float d) {
    return pow(kernelRadius - d, 2) * (r / d) * spikyKernelConst;
}

// Equation (9) from Harada
float Wvis(float r) {
    return (kernelRadius - r) * viscosityKernelConst;
}

vec3 wallForces(vec3 p) {
    vec3 force = vec3(0);
    vec3 r;

    if (p.x < kernelRadius) {
        r = vec3(0, p.y, p.z) - p;
        force += spikyKernel(r, r.length());
    } else if (p.x > size - kernelRadius) {
        r = vec3(size, p.y, p.z) - p;
        force += spikyKernel(r, r.length());
    }

    if (p.y < kernelRadius) {
        r = vec3(p.x, 0, p.z) - p;
        force += spikyKernel(r, r.length());
    } else if (p.y > size - kernelRadius) {
        r = vec3(p.x, size, p.z) - p;
        force += spikyKernel(r, r.length());
    }

    if (p.z < kernelRadius) {
        r = vec3(p.x, p.y, 0) - p;
        force += spikyKernel(r, r.length());
    } else if (p.z > size - kernelRadius) {
        r = vec3(p.x, p.y, size) - p;
        force += spikyKernel(r, r.length());
    }

    return force * 0.01;
}

// https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
// compute the near and far intersections of the cube (stored in the x and y components) using the slab method
// no intersection means vec.x > vec.y (really tNear > tFar)
vec2 intersectAABB(vec3 rayOrigin, vec3 rayDir, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - rayOrigin) / rayDir;
    vec3 tMax = (boxMax - rayOrigin) / rayDir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return vec2(tNear, tFar);
}

// repel particles from mouse ray
vec3 mouseForce(Particle p) {
    // check for intersection with the cube
    const vec2 containerIntersection = intersectAABB(cameraPosition, mouseRayDirection, vec3(0), vec3(size));
    if (containerIntersection.x > containerIntersection.y) {
        return vec3(0);
    }

    const float mouseRadius = kernelRadius;
    const vec3 toMouse = p.position - cameraPosition;
    const float distanceToMouseRay = length(cross(mouseRayDirection, toMouse));
    if (distanceToMouseRay > mouseRadius) {
        return vec3(0);
    }
    
    const float normalizedDistance = max(0, distanceToMouseRay / mouseRadius);    
    return -particleMass * p.pressure * spikyKernel(toMouse, distanceToMouseRay + 1e-16) * 0.00001;
}

void main() {
    const uint particleID = gl_GlobalInvocationID.x;
    if (particleID >= numParticles) {
        return;
    }

    Particle p = particles[particleID];
    const ivec3 coord = clamp(ivec3(p.position / binSize), ivec3(0), ivec3(gridRes - 1));
    
    vec3 pressureForce = vec3(0);
    vec3 viscosityForce = vec3(0);
    vec3 externalForces = gravity * p.density;

    // search the particles of this bin
    for (uint otherParticleID = 0; otherParticleID < numParticles; otherParticleID++) {
        if (particleID == otherParticleID) {
            continue;
        }

        Particle other = particles[otherParticleID];

        // find the distance, ignore if too far
        const vec3 r = p.position - other.position;
        const float dist = length(r);
        if (dist >= kernelRadius) {
            continue;
        }

        // Equation (6) from Harada
        const float pressure = (p.pressure + other.pressure) / (2.0 * other.density);
        if (pressure > 0) {
            // calculate pressure weight as a vector
            vec3 mPressureWeight = spikyKernel(r, dist + 1e-16);
            pressureForce -= particleMass * pressure * mPressureWeight;
        }

        // Equation (7) from Harada
        const vec3 velocityDiff = other.velocity - p.velocity;
        viscosityForce += particleMass * (velocityDiff / other.density) * Wvis(dist);
    }

    externalForces += mouseForce(p) + wallForces(p.position);

    // Sum of Equations (6) and (7) and external forces from Herada
    viscosityForce *= viscosityCoefficient;
    const vec3 force = pressureForce + viscosityForce + externalForces;

    // find accelaration and integrate
    const vec3 acceleration = force / (p.density + 1e-16);
    vec3 vel = clamp(p.velocity + acceleration * dt, -MAX_SPEED, MAX_SPEED);
    vec3 pos = p.position + vel * dt;
    
    const float wallDamping = 0.3;
    const float border = 0.001;

    if (pos.x < border) {
        vel.x *= -wallDamping;
        pos.x = border;
    } else if (pos.x > size - border) {
        vel.x *= -wallDamping;
        pos.x = size - border;
    }

    if (pos.y < border) {
        vel.y *= -wallDamping;
        pos.y = border;
    } else if (pos.y > size - border) {
        vel.y *= -wallDamping;
        pos.y = size - border;
    }

    if (pos.z < border) {
        vel.z *= -wallDamping;
        pos.z = border;
    } else if (pos.z > size - border) {
        vel.z *= -wallDamping;
        pos.z = size - border;
    }

    p.velocity = vel;
    p.position = pos;
    particles[particleID] = p;
}
