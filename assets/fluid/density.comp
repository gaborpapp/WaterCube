#version 460 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

uniform float binSize;
uniform int gridRes;
uniform float mass;
uniform float kernelRadius;
uniform float kernelWeight;
uniform float stiffness;
uniform float restDensity;
uniform float restPressure;

struct Particle {
    vec3 position;
    vec3 velocity;
    float density;
    float pressure;
};

layout(std430, binding = 1) restrict buffer Particles {
    Particle particles[];
};

layout(std430, binding = 16) restrict readonly buffer Buckets {
    int buckets[];
};

layout(std430, binding = 17) restrict readonly buffer Offsets {
    int offsets[];
};

layout(std430, binding = 18) restrict readonly buffer Counts {
    int counts[];
};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

const ivec3 NEIGHBORHOOD[27] = {
    ivec3(-1, -1, -1), ivec3(0, -1, -1), ivec3(1, -1, -1),
    ivec3(-1, -1,  0), ivec3(0, -1,  0), ivec3(1, -1,  0),
    ivec3(-1, -1,  1), ivec3(0, -1,  1), ivec3(1, -1,  1),
    ivec3(-1,  0, -1), ivec3(0,  0, -1), ivec3(1,  0, -1),
    ivec3(-1,  0,  0), ivec3(0,  0,  0), ivec3(1,  0,  0),
    ivec3(-1,  0,  1), ivec3(0,  0,  1), ivec3(1,  0,  1),
    ivec3(-1,  1, -1), ivec3(0,  1, -1), ivec3(1,  1, -1),
    ivec3(-1,  1,  0), ivec3(0,  1,  0), ivec3(1,  1,  0),
    ivec3(-1,  1,  1), ivec3(0,  1,  1), ivec3(1,  1,  1)
};

ivec3 getBucketCoordinates(int id) {
    float sRes = pow(gridRes, 2);
    float x = id / sRes;
    float i = mod(id, sRes);
    float y = i / gridRes;
    float z = mod(i, gridRes);
    return ivec3(x, y, z);
}

int getBucketID(ivec3 coord) {
    return int(floor(coord.x * pow(gridRes, 2) + coord.y * gridRes + coord.z));
}

void main() {
    const uint particleID = gl_GlobalInvocationID.x;	// The .y and .z are both 1 in this case.
    Particle particle = particles[particleID];
    const vec3 position = particle.position;
    const int bucketID = buckets[particleID];
    float density = mass * pow(kernelRadius * kernelRadius, 3) * kernelWeight;
    ivec3 coord = getBucketCoordinates(bucketID);

    // search the particles of each neighboring bin
    #pragma unroll 1
    for (uint i = 0; i < 27; i++) {
        const ivec3 neighborCoord = coord + NEIGHBORHOOD[i];
        const int neighborID = getBucketID(neighborCoord);

        // don't go out of bounds
        if (
            any(lessThan(neighborCoord, ivec3(0))) || 
            any(greaterThanEqual(neighborCoord, ivec3(binSize)))
        ) {
            continue;
        }

        const uint offset = offsets[neighborID];
        const uint count = counts[neighborID];

        // search the particles of this bin
        for (uint p = 0; p < count; p++) {
            const uint otherParticleID = offset + p;
            if (particleID == otherParticleID) {
                continue;
            }

            const vec3 otherPosition = particles[otherParticleID].position;
            const vec3 r = position - otherPosition;
            const float len = length(r);

            if (len >= kernelRadius) {
                continue;
            }

            const float weight = pow(kernelRadius * kernelRadius - len * len, 3) * kernelWeight;
            density += mass * weight;
        }
    }

    particle.density = density;
    particle.pressure = restPressure + stiffness * (density - restDensity);
    particles[particleID] = particle;
}
