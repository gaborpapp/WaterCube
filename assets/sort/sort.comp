#version 460 core

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec3 position;
    float density;
    vec3 velocity;
    float pressure;
};

layout(std430, binding = 0) restrict readonly buffer Particles {
    Particle particles[];
};

layout(std430, binding = 1) restrict buffer Counts {
    uint counts[];
};

layout(std430, binding = 2) restrict readonly buffer Offsets {
    uint offsets[];
};

layout(std430, binding = 3) buffer Sorted {
    uint sorted[];
};

uniform float binSize;
uniform int numItems;
uniform int gridRes;

void main() {
    const uint particleID = gl_GlobalInvocationID.x;
    if (particleID >= numItems) {
        return;
    }

    const Particle p = particles[particleID];
    const ivec3 c = clamp(ivec3(p.position / binSize), ivec3(0), ivec3(gridRes - 1));
    const uint index = c.z * gridRes * gridRes + c.y * gridRes + c.x;
    const uint globalOffset = offsets[index];
    const uint localOffset = atomicAdd(counts[index], 1);
    const uint globalIndex = globalOffset + localOffset;
    sorted[globalIndex] = particleID;
}
