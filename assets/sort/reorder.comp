#version 460 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

struct Particle {
    vec3 position;
    vec3 velocity;
    float density;
    float pressure;
};

layout(std430, binding = 0) restrict readonly buffer Particles1 {
    Particle in_particles[];
};

layout(std430, binding = 1) restrict writeonly buffer Particles2 {
    Particle out_particles[];
};

layout(std430, binding = 16) restrict readonly buffer Buckets {
    int buckets[];
};

layout(std430, binding = 17) restrict readonly buffer Offsets {
    int offsets[];
};

layout(std430, binding = 18) restrict buffer Counts {
    int counts[];
};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void main() {
    const uint particleID = gl_GlobalInvocationID.x;	// The .y and .z are both 1 in this case.
    const int bucketID = buckets[particleID];
    const int localIndex = atomicAdd(counts[bucketID], 1);
    const uint globalIndex = offsets[bucketID] + localIndex;
    out_particles[globalIndex] = in_particles[particleID];
}
