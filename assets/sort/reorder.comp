#version 460 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec3 position;
    vec3 velocity;
    float density;
    float pressure;
};

layout(std430, binding = 0) restrict readonly buffer Particles1 {
    Particle inParticles[];
};

layout(std430, binding = 1) restrict writeonly buffer Particles2 {
    Particle outParticles[];
};

layout(binding = 2, r32ui) uniform restrict uimage3D countGrid;
layout(binding = 3, r32ui) uniform restrict readonly uimage3D offsetGrid;
uniform float binSize;
uniform int numItems;

void main() {
    const uint particleID = gl_GlobalInvocationID.x;
    if (particleID >= numItems) {
        return;
    }

    const Particle p = inParticles[particleID];
    const ivec3 binCoord = ivec3(p.position / binSize);
    const uint globalOffset = imageLoad(offsetGrid, binCoord).x;
    const uint localOffset = imageAtomicAdd(countGrid, binCoord, 1);
    const uint globalIndex = globalOffset + localOffset;
    outParticles[globalIndex] = p;
}
