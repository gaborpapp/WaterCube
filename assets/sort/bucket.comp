#version 460 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
// #extension GL_ARB_bindless_texture: require

// layout(location = 0, r32ui, bindless_image) uniform restrict uimage3D grid;
uniform int gridRes;
uniform float binSize;

struct Particle {
    vec3 position;
    vec3 velocity;
    float density;
    float pressure;
};

layout(std430, binding = 0) restrict readonly buffer Particles {
    Particle particles[];
};

layout(std430, binding = 16) restrict writeonly buffer Buckets {
    uint buckets[];
};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

int getBucketID(vec3 coord) {
    return int(floor(coord.x * pow(gridRes, 2) + coord.y * gridRes + coord.z));
}

void main() {
    const uint particleID = gl_GlobalInvocationID.x;	// The .y and .z are both 1 in this case.
    vec3 p = particles[particleID].position;

    // assign the particle to a bin based on its position
    vec3 bucketCoord = vec3(floor(p.x / binSize), floor(p.y / binSize), floor(p.z / binSize));
    buckets[particleID] = getBucketID(bucketCoord);
}
