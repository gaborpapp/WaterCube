#version 460 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(location = 0, r32ui) uniform restrict uimage3D countGrid;
layout(location = 1, r32ui) uniform restrict uimage3D offsetGrid;
uniform int gridRes;

layout(binding = 0) restrict buffer Count {
    uint globalCount;
};

shared uint localCount;
shared uint globalBaseOffset;

// Compute the prefix sum for each bin
void main() {
    const ivec3 binCoord = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(binCoord, ivec3(gridRes)))) {
        return;
    }

    // Step 1: step local count to 0 for each work group
    if (gl_LocalInvocationIndex == 0) {
        localCount = 0;
    }

    // 
    barrier();

    // Step 2: add bin count to local prerfix sum
    const uint binCount = imageLoad(countGrid, binCoord).x;
    const uint localOffset = atomicAdd(localCount, binCount);

    barrier();

    // Step 3: set the bin offset for the work group based on the global and local count
    if (gl_LocalInvocationIndex == 0) {
        globalBaseOffset = atomicAdd(globalCount, localCount);
    }

    barrier();

    // Step 4: 
    const uint globalOffset = globalBaseOffset + localOffset;
    imageStore(offsetGrid, binCoord, uvec4(globalOffset));
}
